---
import { SITE_TAB, SITE_DESCRIPTION, SITE_FAVICON, SITE_LANGUAGE, SITE_THEME } from "@config";
import { ClientRouter } from "astro:transitions";
import ElementCrossing from "astro-vtbot/components/ElementCrossing.astro";
import PointerOnNavigation from "astro-vtbot/components/PointerOnNavigation.astro";
import Header from "@components/Header.astro";
import Sidebar from "@components/Sidebar.astro";
import Footer from "@components/Footer.astro";
import Navbar from "@components/Navbar.astro";
import MobileTOC from "@components/widgets/MobileTOC.astro";
import Banner from '../components/Banner.astro';

const { title, image, description = SITE_DESCRIPTION, headings = [], showTOC = false, isIndexed = true } = Astro.props;
---

<!doctype html>
<html lang={SITE_LANGUAGE} class="bg-base-300" data-theme={SITE_THEME.light} data-theme-type="light">
  <head>
    <ClientRouter />
    <ElementCrossing />
    <PointerOnNavigation />
    <Header title={title} description={description} favicon={SITE_FAVICON} image={image} />
    <title>{`${title} - ${SITE_TAB}`}</title>

    <script define:vars={{ SITE_THEME }} is:inline>
      (function () {
        const storedTheme = localStorage.getItem("theme");
        const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
        let theme;
        if (storedTheme) {
          theme = storedTheme;
        } else {
          theme = prefersDark ? SITE_THEME.dark : SITE_THEME.light;
          localStorage.setItem("theme", theme);
        }
        document.documentElement.setAttribute("data-theme", theme);
        const themeType = theme === SITE_THEME.dark ? "dark" : "light";
        document.documentElement.setAttribute("data-theme-type", themeType);
        window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
          if (!localStorage.getItem("theme")) {
            const newTheme = e.matches ? SITE_THEME.dark : SITE_THEME.light;
            document.documentElement.setAttribute("data-theme", newTheme);
            const newThemeType = e.matches ? "dark" : "light";
            document.documentElement.setAttribute("data-theme-type", newThemeType);
            localStorage.setItem("theme", newTheme);
          }
        });
      })();
    </script>
  </head>

  <body class="flex flex-col min-h-screen" {...isIndexed ? { "data-pagefind-body": true } : {}}>
    <!-- 导航栏 -->
    <Navbar />

   <Navbar />

<!-- Banner 占满屏幕 -->
<Banner
  src="/images/https://pic1.imgdb.cn/item/68d3f03fc5157e1a882d187d.jpg"
  alt="博客头图"
  title="欢迎来到我的博客"
  subtitle="记录技术与生活"
  class="h-screen"
/>

<!-- 内容区半透明背景 -->
<div class="relative max-w-6xl mx-auto w-full -mt-32 z-20">
  <div class="bg-white/80 dark:bg-black/60 backdrop-blur-md rounded-lg p-6 md:p-12 shadow-lg">
    <div class="grid grid-cols-1 md:grid-cols-5 lg:grid-cols-4 gap-4">
      <main class="col-span-1 md:col-span-4 lg:col-span-3 flex flex-col gap-4">
        <slot />
      </main>
      <aside class="col-span-1">
        <Sidebar headings={headings} showTOC={showTOC} />
        <slot name="sidebar" />
      </aside>
    </div>
  </div>
</div>

    <!-- 主体内容 + 侧边栏 -->
    <div class="max-w-6xl mx-auto w-full flex-grow">
      <div class="grid grid-cols-1 md:grid-cols-5 lg:grid-cols-4 gap-4 p-4 h-full">
        <!-- 主内容 -->
        <main class="col-span-1 md:col-span-4 lg:col-span-3 bg-transparent flex flex-col gap-4">
          <div class="flex-grow flex flex-col gap-4 mt-8 md:mt-0">
            <slot />
          </div>
          <Footer />
        </main>

        <!-- 侧边栏 -->
        <aside class="col-span-1 bg-transparent">
          <Sidebar headings={headings} showTOC={showTOC} />
          <slot name="sidebar" />
        </aside>
      </div>
    </div>

    <!-- 移动端 TOC -->
    <MobileTOC headings={headings} showTOC={showTOC} />

    <!-- 保持主题切换同步 -->
    <script define:vars={{ SITE_THEME }} is:inline>
      document.addEventListener("astro:after-swap", () => {
        const storedTheme = localStorage.getItem("theme");
        if (storedTheme) {
          document.documentElement.setAttribute("data-theme", storedTheme);
          const themeType = storedTheme === SITE_THEME.dark ? "dark" : "light";
          document.documentElement.setAttribute("data-theme-type", themeType);
        }
      });
    </script>

    <!-- 代码复制按钮脚本 -->
    <script is:inline>
      document.addEventListener("astro:page-load", () => {
        document.querySelectorAll(".btn-copy").forEach((button) => {
          button.addEventListener("click", async () => {
            const codeBlock = button.closest(".frosti-code");
            const code = codeBlock.querySelector("code").textContent;
            const copyIcon = button.querySelector(".frosti-code-toolbar-copy-icon");
            const successIcon = button.querySelector(".frosti-code-toolbar-copy-success");
            try {
              await navigator.clipboard.writeText(code);
              copyIcon.classList.add("hidden");
              successIcon.classList.remove("hidden");
              button.classList.add("copy-success");
              setTimeout(() => {
                copyIcon.classList.remove("hidden");
                successIcon.classList.add("hidden");
                button.classList.remove("copy-success");
              }, 2000);
            } catch (err) {
              console.error("Failed to copy:", err);
            }
          });
        });
      });
    </script>

    <style is:inline>
      .btn-copy { position: relative; overflow: hidden; }
      .copy-success { animation: pulse 0.5s ease-in-out; }
      .frosti-code-toolbar-copy-success svg { color: #10b981; }
      @keyframes pulse { 0% { transform: scale(1); } 50% { transform: scale(1.1); } 100% { transform: scale(1); } }
    </style>
  </body>
</html>
