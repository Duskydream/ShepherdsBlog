---
export interface Props {
  username: string;
  repo: string;
}

const { username, repo } = Astro.props;
---

<div class="github-calendar-simple">
  <div class="contributions-info">
    <span class="font-semibold">Loading...</span> deploys in the last year
  </div>

  <div class="calendar-graph">
    <div class="months" id="months-container">
      <!-- 月份标签将通过JavaScript动态生成 -->
    </div>

    <div class="calendar-grid">
      <div class="days-labels">
        <span></span>
        <span>Mon</span>
        <span></span>
        <span>Wed</span>
        <span></span>
        <span>Fri</span>
        <span></span>
      </div>

      <div class="weeks">
        {
          Array.from({ length: 53 }).map((_, i) => (
            <div class="week">
              {Array.from({ length: 7 }).map((_, j) => (
                <div class="day" data-level="0" />
              ))}
            </div>
          ))
        }
      </div>
    </div>
  </div>

  <div class="legend">
    <span class="legend-text">Less</span>
    <div class="legend-squares">
      <div class="day" data-level="0"></div>
      <div class="day" data-level="1"></div>
      <div class="day" data-level="2"></div>
      <div class="day" data-level="3"></div>
      <div class="day" data-level="4"></div>
    </div>
    <span class="legend-text">More</span>
  </div>

  <div class="footer-link">
    <a href={`https://github.com/${username}/${repo}/actions`} target="_blank" rel="noopener noreferrer">
      View Actions
    </a>
  </div>
</div>

<script define:vars={{ username, repo }}>
  // 前端动态加载GitHub Actions部署数据
  async function loadGitHubActionsData() {
    try {
      console.log("Loading GitHub Actions data for:", username, repo);

      // 调用GitHub Actions API获取workflow runs
      // 获取最近一年的数据 (created > '2024-01-01' 或类似的)
      const oneYearAgo = new Date();
      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
      const since = oneYearAgo.toISOString().split("T")[0];

      // 获取多页数据以覆盖一年的记录
      const allWorkflowRuns = [];
      const maxPages = 5; // 最多获取5页（500条记录）

      for (let page = 1; page <= maxPages; page++) {
        const pageUrl = `https://api.github.com/repos/${username}/${repo}/actions/runs?per_page=100&page=${page}`;
        console.log("Fetching page", page, ":", pageUrl);

        const pageResponse = await fetch(pageUrl, {
          headers: {
            Accept: "application/vnd.github.v3+json",
          },
        });

        if (!pageResponse.ok) {
          console.warn(`Failed to fetch page ${page}:`, pageResponse.status);
          break; // 如果某页失败，停止获取
        }

        const pageData = await pageResponse.json();
        const pageRuns = pageData.workflow_runs || [];

        if (pageRuns.length === 0) break; // 没有更多数据

        allWorkflowRuns.push(...pageRuns);

        // 检查是否已经覆盖了一年的数据
        if (pageRuns.length > 0) {
          const oldestRun = pageRuns[pageRuns.length - 1];
          const runDate = new Date(oldestRun.created_at);
          const oneYearAgo = new Date();
          oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

          if (runDate < oneYearAgo) break; // 已经获取到一年前的数据
        }
      }

      const data = { workflow_runs: allWorkflowRuns };
      console.log("GitHub Actions data:", data);

      // 处理workflow runs数据
      const workflowRuns = data.workflow_runs || [];

      console.log(`Total workflow runs: ${workflowRuns.length}`);

      // 简化：使用所有成功的runs（不限制deploy相关）
      const successfulRuns = workflowRuns.filter((run) => run.conclusion === "success");

      console.log(`Successful runs: ${successfulRuns.length}`);

      // 如果没有成功的runs，使用所有runs
      const finalRuns = successfulRuns.length > 0 ? successfulRuns : workflowRuns;

      console.log(`Final runs to display: ${finalRuns.length}`);

      // 按日期统计部署次数
      const deployCounts = {};
      finalRuns.forEach((run) => {
        const date = run.created_at.split("T")[0]; // YYYY-MM-DD格式
        deployCounts[date] = (deployCounts[date] || 0) + 1;
      });

      // 生成过去一年的完整日期范围
      const today = new Date();
      const calendarStartDate = new Date(today);
      calendarStartDate.setFullYear(today.getFullYear() - 1);

      const contributions = [];
      for (let d = new Date(calendarStartDate); d <= today; d.setDate(d.getDate() + 1)) {
        const dateStr = d.toISOString().split("T")[0];
        contributions.push({
          date: dateStr,
          count: deployCounts[dateStr] || 0,
        });
      }

      const totalDeploys = finalRuns.length;

      // 更新贡献信息
      const infoElement = document.querySelector(".contributions-info");
      if (infoElement) {
        infoElement.innerHTML = `
          <span class="font-semibold">${totalDeploys}</span> successful workflow runs in the last year
          ${contributions.length > 0 ? `<span class="text-xs text-base-content/50 ml-2">(Last: ${contributions[contributions.length - 1]?.date || "N/A"})</span>` : ""}
        `;
      }

      // 更新日历
      updateCalendar(contributions);
    } catch (error) {
      console.error("Error loading GitHub Actions data:", error);

      // 显示错误信息
      const infoElement = document.querySelector(".contributions-info");
      if (infoElement) {
        infoElement.innerHTML = `
          <span class="font-semibold text-error">Error</span> loading deployment data
          <span class="text-xs text-base-content/50 ml-2">(Check console for details)</span>
        `;
      }

      updateCalendarWithPlaceholder();
    }
  }

  function updateMonthsLabels(contributions) {
    const monthsContainer = document.getElementById("months-container");
    if (!monthsContainer) return;

    // 清空现有标签
    monthsContainer.innerHTML = "";

    if (contributions.length === 0) return;

    // 获取日期范围（过去一年）
    const endDate = new Date(contributions[contributions.length - 1].date);
    const startDate = new Date(endDate);
    startDate.setFullYear(startDate.getFullYear() - 1);
    startDate.setDate(startDate.getDate() + 1); // 包含起始日期

    // 生成月份标签
    const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

    // 从起始年月的第一天开始
    let currentDate = new Date(startDate.getFullYear(), startDate.getMonth(), 1);

    while (currentDate <= endDate) {
      const monthName = monthNames[currentDate.getMonth()];
      const year = currentDate.getFullYear();

      // 计算这个月在日历网格中的起始列位置
      const monthStartDate = new Date(year, currentDate.getMonth(), 1);
      const daysDiff = Math.floor((monthStartDate - startDate) / (1000 * 60 * 60 * 24));
      const columnStart = Math.floor(daysDiff / 7) + 1;

      // 只在有效范围内显示标签
      if (columnStart >= 1 && columnStart <= 53) {
        const monthLabel = document.createElement("span");
        monthLabel.className = "month-label";
        monthLabel.style.gridColumn = columnStart.toString();
        monthLabel.textContent = monthName;
        monthsContainer.appendChild(monthLabel);
      }

      // 移动到下个月
      currentDate.setMonth(currentDate.getMonth() + 1);
    }
  }

  function updateCalendar(contributions) {
    // 更新月份标签
    updateMonthsLabels(contributions);

    const weeks = [];
    const recentContributions = contributions.slice(-371);

    let currentWeek = [];
    recentContributions.forEach((day) => {
      if (currentWeek.length === 7) {
        weeks.push(currentWeek);
        currentWeek = [];
      }
      currentWeek.push(day);
    });
    if (currentWeek.length > 0) {
      weeks.push(currentWeek);
    }

    // 更新DOM
    const weekElements = document.querySelectorAll(".week");
    weeks.forEach((week, weekIndex) => {
      if (weekElements[weekIndex]) {
        const dayElements = weekElements[weekIndex].querySelectorAll(".day");
        week.forEach((day, dayIndex) => {
          if (dayElements[dayIndex]) {
            const level = getLevel(day.count);
            dayElements[dayIndex].setAttribute("data-level", level);
            dayElements[dayIndex].setAttribute("title", `${day.count} deploys on ${day.date}`);
          }
        });
      }
    });
  }

  function updateCalendarWithPlaceholder() {
    // 显示占位符数据
    const infoElement = document.querySelector(".contributions-info");
    if (infoElement) {
      infoElement.innerHTML = `
        <span class="font-semibold">Sample</span> deploys in the last year
        <span class="text-xs text-base-content/50 ml-2">(Placeholder data)</span>
      `;
    }

    // 生成占位符月份标签（使用当前日期向前推一年）
    const placeholderContributions = [];
    const today = new Date();
    for (let i = 364; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      placeholderContributions.push({
        date: date.toISOString().split("T")[0],
        count: Math.floor(Math.random() * 5),
      });
    }
    updateMonthsLabels(placeholderContributions);

    // 生成随机占位符数据
    const weekElements = document.querySelectorAll(".week");
    weekElements.forEach((weekElement) => {
      const dayElements = weekElement.querySelectorAll(".day");
      dayElements.forEach((dayElement) => {
        const level = Math.floor(Math.random() * 5);
        dayElement.setAttribute("data-level", level);
        dayElement.setAttribute("title", "Sample data - GitHub API unavailable");
      });
    });
  }

  function getLevel(count) {
    if (count === 0) return 0; // 无部署
    if (count <= 1) return 1; // 1次部署
    if (count <= 3) return 2; // 2-3次部署
    if (count <= 5) return 3; // 4-5次部署
    return 4; // 6次及以上部署
  }

  // 页面加载完成后执行
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", loadGitHubActionsData);
  } else {
    loadGitHubActionsData();
  }
</script><style>
  .github-calendar-simple {
    @apply bg-base-200 rounded-xl p-6;
  }

  .contributions-info {
    @apply text-sm text-base-content/70 mb-4;
  }

  .calendar-graph {
    @apply overflow-x-auto pb-2;
  }

  .months {
    @apply grid mb-2;
    grid-template-columns: repeat(53, 11px);
    gap: 3px;
  }

  .month-label {
    @apply text-xs text-base-content/60;
    font-size: 10px;
  }

  .calendar-grid {
    @apply flex gap-3;
  }

  .days-labels {
    @apply flex flex-col gap-[3px] text-xs text-base-content/60 pr-2;
    font-size: 9px;
  }

  .days-labels span {
    height: 11px;
    line-height: 11px;
  }

  .weeks {
    @apply flex gap-[3px];
  }

  .week {
    @apply flex flex-col gap-[3px];
  }

  .day {
    width: 11px;
    height: 11px;
    @apply rounded-sm cursor-pointer transition-all;
  }

  .day:hover {
    @apply ring-1 ring-base-content/30;
    transform: scale(1.2);
  }

  /* 红色主题 - 浅色模式 */
  html:not(.dark) .day[data-level="0"] {
    background-color: #ebedf0;
  }
  html:not(.dark) .day[data-level="1"] {
    background-color: #ffcdd2;
  }
  html:not(.dark) .day[data-level="2"] {
    background-color: #ef5350;
  }
  html:not(.dark) .day[data-level="3"] {
    background-color: #e53935;
  }
  html:not(.dark) .day[data-level="4"] {
    background-color: #c62828;
  }

  /* 红色主题 - 深色模式 */
  html.dark .day[data-level="0"] {
    background-color: #161b22;
  }
  html.dark .day[data-level="1"] {
    background-color: #5c1a1a;
  }
  html.dark .day[data-level="2"] {
    background-color: #8b2525;
  }
  html.dark .day[data-level="3"] {
    background-color: #c62828;
  }
  html.dark .day[data-level="4"] {
    background-color: #ff5252;
  }

  .legend {
    @apply flex items-center gap-2 mt-4 text-xs text-base-content/60;
  }

  .legend-text {
    @apply text-xs;
  }

  .legend-squares {
    @apply flex gap-1;
  }

  .legend-squares .day {
    @apply cursor-default;
  }

  .legend-squares .day:hover {
    @apply ring-0;
    transform: none;
  }

  .footer-link {
    @apply mt-4 text-center;
  }

  .footer-link a {
    @apply text-sm text-primary hover:underline;
  }

  @media (max-width: 768px) {
    .calendar-graph {
      @apply -mx-2;
    }

    .months {
      grid-template-columns: repeat(53, 10px);
      gap: 2px;
    }

    .week {
      gap: 2px;
    }

    .weeks {
      gap: 2px;
    }

    .day {
      width: 10px;
      height: 10px;
    }
  }
</style>
