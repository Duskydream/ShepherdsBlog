---
export interface Props {
  username: string;
}

const { username } = Astro.props;
---

<div class="github-calendar-simple">
  <div class="contributions-info">
    <span class="font-semibold">Loading...</span> contributions in the last year
  </div>

  <div class="calendar-graph">
    <div class="months">
      {
        ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"].map((month, i) => (
          <span class="month-label" style={`grid-column: ${Math.floor(i * 4.3) + 1}`}>
            {month}
          </span>
        ))
      }
    </div>

    <div class="calendar-grid">
      <div class="days-labels">
        <span></span>
        <span>Mon</span>
        <span></span>
        <span>Wed</span>
        <span></span>
        <span>Fri</span>
        <span></span>
      </div>

      <div class="weeks">
        {
          Array.from({ length: 53 }).map((_, i) => (
            <div class="week">
              {Array.from({ length: 7 }).map((_, j) => (
                <div class="day" data-level="0" />
              ))}
            </div>
          ))
        }
      </div>
    </div>
  </div>

  <div class="legend">
    <span class="legend-text">Less</span>
    <div class="legend-squares">
      <div class="day" data-level="0"></div>
      <div class="day" data-level="1"></div>
      <div class="day" data-level="2"></div>
      <div class="day" data-level="3"></div>
      <div class="day" data-level="4"></div>
    </div>
    <span class="legend-text">More</span>
  </div>

  <div class="footer-link">
    <a href={`https://github.com/${username}`} target="_blank" rel="noopener noreferrer"> View on GitHub </a>
  </div>
</div>

<script define:vars={{ username }}>
  // 前端动态加载GitHub贡献数据
  async function loadGitHubContributions() {
    try {
      // 使用多个API作为备用方案
      const apis = [
        `https://github-contributions-api.jogruber.de/v4/${username}?y=last`,
        `https://api.github-contributions-canvas.vercel.app/api/${username}`,
        `https://ghchart.rshah.org/${username}`,
      ];

      let data = null;
      let error = null;

      // 尝试第一个API
      try {
        const response = await fetch(apis[0]);
        if (response.ok) {
          data = await response.json();
        }
      } catch (e) {
        console.log("First API failed, trying backup...");
      }

      // 如果第一个失败，尝试第二个API
      if (!data) {
        try {
          const response = await fetch(apis[1]);
          if (response.ok) {
            data = await response.json();
          }
        } catch (e) {
          console.log("Second API failed, trying SVG fallback...");
        }
      }

      // 如果API都失败，使用SVG方案
      if (!data) {
        console.log("Using SVG fallback...");
        const img = new Image();
        img.onload = function () {
          // SVG加载成功，显示占位符数据
          updateCalendarWithPlaceholder();
        };
        img.onerror = function () {
          updateCalendarWithPlaceholder();
        };
        img.src = `https://ghchart.rshah.org/${username}`;
        return;
      }

      // 处理数据
      let contributions = [];
      let totalContributions = 0;

      if (data.contributions && Array.isArray(data.contributions)) {
        contributions = data.contributions;
        totalContributions = contributions.reduce((sum, day) => sum + (day.count || 0), 0);
      } else if (data.total) {
        // 如果是其他格式的数据
        totalContributions = Object.values(data.total).reduce((sum, year) => sum + year, 0);
        contributions = data.contributions || [];
      }

      // 更新贡献信息
      const infoElement = document.querySelector(".contributions-info");
      if (infoElement) {
        infoElement.innerHTML = `
          <span class="font-semibold">${totalContributions}</span> contributions in the last year
          ${contributions.length > 0 ? `<span class="text-xs text-base-content/50 ml-2">(${contributions[contributions.length - 1]?.date || "Loading..."})</span>` : ""}
        `;
      }

      // 更新日历
      updateCalendar(contributions);
    } catch (error) {
      console.error("Error loading GitHub contributions:", error);
      updateCalendarWithPlaceholder();
    }
  }

  function updateCalendar(contributions) {
    const weeks = [];
    const recentContributions = contributions.slice(-371);

    let currentWeek = [];
    recentContributions.forEach((day) => {
      if (currentWeek.length === 7) {
        weeks.push(currentWeek);
        currentWeek = [];
      }
      currentWeek.push(day);
    });
    if (currentWeek.length > 0) {
      weeks.push(currentWeek);
    }

    // 更新DOM
    const weekElements = document.querySelectorAll(".week");
    weeks.forEach((week, weekIndex) => {
      if (weekElements[weekIndex]) {
        const dayElements = weekElements[weekIndex].querySelectorAll(".day");
        week.forEach((day, dayIndex) => {
          if (dayElements[dayIndex]) {
            const level = getLevel(day.count);
            dayElements[dayIndex].setAttribute("data-level", level);
            dayElements[dayIndex].setAttribute("title", `${day.count} contributions on ${day.date}`);
          }
        });
      }
    });
  }

  function updateCalendarWithPlaceholder() {
    // 显示占位符数据
    const infoElement = document.querySelector(".contributions-info");
    if (infoElement) {
      infoElement.innerHTML = `
        <span class="font-semibold">Sample</span> contributions in the last year
        <span class="text-xs text-base-content/50 ml-2">(Placeholder data)</span>
      `;
    }

    // 生成随机占位符数据
    const weekElements = document.querySelectorAll(".week");
    weekElements.forEach((weekElement) => {
      const dayElements = weekElement.querySelectorAll(".day");
      dayElements.forEach((dayElement) => {
        const level = Math.floor(Math.random() * 5);
        dayElement.setAttribute("data-level", level);
        dayElement.setAttribute("title", "Sample data - GitHub API unavailable");
      });
    });
  }

  function getLevel(count) {
    if (count === 0) return 0;
    if (count <= 3) return 1;
    if (count <= 6) return 2;
    if (count <= 9) return 3;
    return 4;
  }

  // 页面加载完成后执行
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", loadGitHubContributions);
  } else {
    loadGitHubContributions();
  }
</script>

<style>
  .github-calendar-simple {
    @apply bg-base-200 rounded-xl p-6;
  }

  .contributions-info {
    @apply text-sm text-base-content/70 mb-4;
  }

  .calendar-graph {
    @apply overflow-x-auto pb-2;
  }

  .months {
    @apply grid mb-2;
    grid-template-columns: repeat(53, 11px);
    gap: 3px;
  }

  .month-label {
    @apply text-xs text-base-content/60;
    font-size: 10px;
  }

  .calendar-grid {
    @apply flex gap-3;
  }

  .days-labels {
    @apply flex flex-col gap-[3px] text-xs text-base-content/60 pr-2;
    font-size: 9px;
  }

  .days-labels span {
    height: 11px;
    line-height: 11px;
  }

  .weeks {
    @apply flex gap-[3px];
  }

  .week {
    @apply flex flex-col gap-[3px];
  }

  .day {
    width: 11px;
    height: 11px;
    @apply rounded-sm cursor-pointer transition-all;
  }

  .day:hover {
    @apply ring-1 ring-base-content/30;
    transform: scale(1.2);
  }

  /* 红色主题 - 浅色模式 */
  html:not(.dark) .day[data-level="0"] {
    background-color: #ebedf0;
  }
  html:not(.dark) .day[data-level="1"] {
    background-color: #ffcdd2;
  }
  html:not(.dark) .day[data-level="2"] {
    background-color: #ef5350;
  }
  html:not(.dark) .day[data-level="3"] {
    background-color: #e53935;
  }
  html:not(.dark) .day[data-level="4"] {
    background-color: #c62828;
  }

  /* 红色主题 - 深色模式 */
  html.dark .day[data-level="0"] {
    background-color: #161b22;
  }
  html.dark .day[data-level="1"] {
    background-color: #5c1a1a;
  }
  html.dark .day[data-level="2"] {
    background-color: #8b2525;
  }
  html.dark .day[data-level="3"] {
    background-color: #c62828;
  }
  html.dark .day[data-level="4"] {
    background-color: #ff5252;
  }

  .legend {
    @apply flex items-center gap-2 mt-4 text-xs text-base-content/60;
  }

  .legend-text {
    @apply text-xs;
  }

  .legend-squares {
    @apply flex gap-1;
  }

  .legend-squares .day {
    @apply cursor-default;
  }

  .legend-squares .day:hover {
    @apply ring-0;
    transform: none;
  }

  .footer-link {
    @apply mt-4 text-center;
  }

  .footer-link a {
    @apply text-sm text-primary hover:underline;
  }

  @media (max-width: 768px) {
    .calendar-graph {
      @apply -mx-2;
    }

    .months {
      grid-template-columns: repeat(53, 10px);
      gap: 2px;
    }

    .week {
      gap: 2px;
    }

    .weeks {
      gap: 2px;
    }

    .day {
      width: 10px;
      height: 10px;
    }
  }
</style>
