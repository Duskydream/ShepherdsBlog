---
export interface Props {
  username: string;
  repo: string;
}

const { username, repo } = Astro.props;

interface ContributionDay {
  date: string;
  count: number;
}

interface MonthLabel {
  name: string;
  columnStart: number;
}

const ONE_YEAR_AGO = (() => {
  const date = new Date();
  date.setFullYear(date.getFullYear() - 1);
  return date;
})();

async function fetchWorkflowRuns(): Promise<any[]> {
  const allWorkflowRuns: any[] = [];
  const maxPages = 5;
  const token =
    import.meta.env.GITHUB_TOKEN ?? import.meta.env.PRIVATE_GITHUB_TOKEN ?? import.meta.env.GITHUB_TOKEN_BEARER;

  for (let page = 1; page <= maxPages; page++) {
    const pageUrl = `https://api.github.com/repos/${username}/${repo}/actions/runs?per_page=100&page=${page}`;
    const response = await fetch(pageUrl, {
      headers: {
        Accept: "application/vnd.github.v3+json",
        "User-Agent": "ShepherdsBlog-GitHubCalendar",
        ...(token ? { Authorization: `Bearer ${token}` } : {}),
      },
    });

    if (!response.ok) {
      throw new Error(`Failed to load workflow runs (status ${response.status})`);
    }

    const pageData = await response.json();
    const pageRuns = pageData.workflow_runs ?? [];

    if (pageRuns.length === 0) {
      break;
    }

    allWorkflowRuns.push(...pageRuns);

    const oldestRun = pageRuns[pageRuns.length - 1];
    const oldestRunDate = new Date(oldestRun.created_at);

    if (oldestRunDate < ONE_YEAR_AGO) {
      break;
    }
  }

  return allWorkflowRuns;
}

function toContributionDays(runDates: ContributionDay[]): ContributionDay[] {
  const lookup = new Map(runDates.map((entry) => [entry.date, entry.count]));
  const today = new Date();
  const calendarStartDate = new Date(today);
  calendarStartDate.setFullYear(today.getFullYear() - 1);

  const days: ContributionDay[] = [];
  for (let d = new Date(calendarStartDate); d <= today; d.setDate(d.getDate() + 1)) {
    const dateStr = d.toISOString().split("T")[0];
    days.push({
      date: dateStr,
      count: lookup.get(dateStr) ?? 0,
    });
  }

  return days;
}

function buildMonthLabels(contributions: ContributionDay[]): MonthLabel[] {
  if (contributions.length === 0) {
    return [];
  }

  const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  const endDate = new Date(contributions[contributions.length - 1].date);
  const startDate = new Date(endDate);
  startDate.setFullYear(startDate.getFullYear() - 1);
  startDate.setDate(startDate.getDate() + 1);
  const labels: MonthLabel[] = [];

  const iterator = new Date(startDate.getFullYear(), startDate.getMonth(), 1);

  while (iterator <= endDate) {
    const monthStart = new Date(iterator);
    const daysDiff = Math.floor((monthStart.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
    const columnStart = Math.floor(daysDiff / 7) + 1;

    if (columnStart >= 1 && columnStart <= 53) {
      labels.push({
        name: monthNames[monthStart.getMonth()],
        columnStart,
      });
    }

    iterator.setMonth(iterator.getMonth() + 1);
  }

  return labels;
}

function computeLevel(count: number): number {
  if (count === 0) return 0;
  if (count <= 1) return 1;
  if (count <= 3) return 2;
  if (count <= 5) return 3;
  return 4;
}

function generatePlaceholder(): { contributions: ContributionDay[]; total: number; lastDate: string | null } {
  const today = new Date();
  const contributions: ContributionDay[] = [];
  let total = 0;

  for (let i = 364; i >= 0; i--) {
    const date = new Date(today);
    date.setDate(date.getDate() - i);
    const count = Math.floor(Math.random() * 5);
    contributions.push({
      date: date.toISOString().split("T")[0],
      count,
    });
    total += count;
  }

  return {
    contributions,
    total,
    lastDate: contributions[contributions.length - 1]?.date ?? null,
  };
}

let contributions: ContributionDay[] = [];
let totalDeploys = 0;
let lastRunDate: string | null = null;
let monthLabels: MonthLabel[] = [];
let placeholder = false;

try {
  const workflowRuns = await fetchWorkflowRuns();
  const runsWithinYear = workflowRuns.filter((run) => new Date(run.created_at) >= ONE_YEAR_AGO);
  const successfulRuns = runsWithinYear.filter((run) => run.conclusion === "success");
  const finalRuns = successfulRuns.length > 0 ? successfulRuns : runsWithinYear;

  const countsByDate = finalRuns.reduce<Record<string, number>>((acc, run) => {
    const dateKey = run.created_at.split("T")[0];
    acc[dateKey] = (acc[dateKey] ?? 0) + 1;
    return acc;
  }, {});

  const days = Object.entries(countsByDate)
    .map(([date, count]) => ({ date, count }))
    .sort((a, b) => (a.date < b.date ? -1 : 1));

  contributions = toContributionDays(days);
  totalDeploys = finalRuns.length;

  if (finalRuns.length > 0) {
    const sortedRuns = [...finalRuns].sort((a, b) => a.created_at.localeCompare(b.created_at));
    lastRunDate = sortedRuns[sortedRuns.length - 1]?.created_at.split("T")[0] ?? null;
  }
} catch (error) {
  console.error("Failed to load GitHub Actions data:", error);
  placeholder = true;
  const placeholderData = generatePlaceholder();
  contributions = placeholderData.contributions;
  totalDeploys = placeholderData.total;
  lastRunDate = placeholderData.lastDate;
}

const TOTAL_WEEKS = 53;
const DAYS_PER_WEEK = 7;
const MAX_CELLS = TOTAL_WEEKS * DAYS_PER_WEEK;
const contributionsMap = new Map(contributions.map((entry) => [entry.date, entry.count]));

const latestContributionDate =
  contributions.length > 0 ? new Date(contributions[contributions.length - 1].date) : new Date();

const rangeEnd = new Date(latestContributionDate);
while (rangeEnd.getDay() !== 6) {
  rangeEnd.setDate(rangeEnd.getDate() + 1);
}

const rangeStart = new Date(rangeEnd);
rangeStart.setDate(rangeStart.getDate() - (MAX_CELLS - 1));

const recentContributions: ContributionDay[] = [];
for (let cursor = new Date(rangeStart); cursor <= rangeEnd; cursor.setDate(cursor.getDate() + 1)) {
  const dateStr = cursor.toISOString().split("T")[0];
  recentContributions.push({
    date: dateStr,
    count: contributionsMap.get(dateStr) ?? 0,
  });
}

monthLabels = buildMonthLabels(recentContributions);

const weeks = Array.from({ length: TOTAL_WEEKS }, (_, weekIndex) => {
  const start = weekIndex * DAYS_PER_WEEK;
  return recentContributions.slice(start, start + DAYS_PER_WEEK);
});
---

<div class="github-calendar-simple">
  <div class="contributions-info">
    {
      placeholder ? (
        <>
          <span class="font-semibold">Sample</span> deploys in the last year
          <span class="text-xs text-base-content/50 ml-2">(Placeholder data)</span>
        </>
      ) : (
        <>
          <span class="font-semibold">{totalDeploys}</span> successful workflow runs in the last year
          {lastRunDate && <span class="text-xs text-base-content/50 ml-2">(Last: {lastRunDate})</span>}
        </>
      )
    }
  </div>

  <div class="calendar-graph">
    <div class="months" id="months-container">
      {
        monthLabels.map((label) => (
          <span class="month-label" style={`grid-column: ${label.columnStart}`}>
            {label.name}
          </span>
        ))
      }
    </div>

    <div class="calendar-grid">
      <div class="days-labels">
        <span></span>
        <span>Mon</span>
        <span></span>
        <span>Wed</span>
        <span></span>
        <span>Fri</span>
        <span></span>
      </div>

      <div class="weeks">
        {
          weeks.map((week) => (
            <div class="week">
              {Array.from({ length: 7 }).map((_, dayIndex) => {
                const day = week[dayIndex];
                const level = day ? computeLevel(day.count) : 0;
                const title = day ? `${day.count} deploys on ${day.date}` : "No deployment data";

                return <div class="day" data-level={level} title={title} />;
              })}
            </div>
          ))
        }
      </div>
    </div>
  </div>

  <div class="legend">
    <span class="legend-text">Less</span>
    <div class="legend-squares">
      <div class="day" data-level="0"></div>
      <div class="day" data-level="1"></div>
      <div class="day" data-level="2"></div>
      <div class="day" data-level="3"></div>
      <div class="day" data-level="4"></div>
    </div>
    <span class="legend-text">More</span>
  </div>

  <div class="footer-link">
    <a href={`https://github.com/${username}/${repo}/actions`} target="_blank" rel="noopener noreferrer">
      View Actions
    </a>
  </div>
</div>
<style>
  .github-calendar-simple {
    @apply bg-base-200 rounded-xl p-6;
  }

  .contributions-info {
    @apply text-sm text-base-content/70 mb-4;
  }

  .calendar-graph {
    @apply overflow-x-auto pb-2;
  }

  .months {
    @apply grid mb-2;
    grid-template-columns: repeat(53, 11px);
    gap: 3px;
  }

  .month-label {
    @apply text-xs text-base-content/60;
    font-size: 10px;
  }

  .calendar-grid {
    @apply flex gap-3;
  }

  .days-labels {
    @apply flex flex-col gap-[3px] text-xs text-base-content/60 pr-2;
    font-size: 9px;
  }

  .days-labels span {
    height: 11px;
    line-height: 11px;
  }

  .weeks {
    @apply flex gap-[3px];
  }

  .week {
    @apply flex flex-col gap-[3px];
  }

  .day {
    width: 11px;
    height: 11px;
    @apply rounded-sm cursor-pointer transition-all;
  }

  .day:hover {
    @apply ring-1 ring-base-content/30;
    transform: scale(1.2);
  }

  /* 红色主题 - 浅色模式 */
  html:not(.dark) .day[data-level="0"] {
    background-color: #ebedf0;
  }
  html:not(.dark) .day[data-level="1"] {
    background-color: #ffcdd2;
  }
  html:not(.dark) .day[data-level="2"] {
    background-color: #ef5350;
  }
  html:not(.dark) .day[data-level="3"] {
    background-color: #e53935;
  }
  html:not(.dark) .day[data-level="4"] {
    background-color: #c62828;
  }

  /* 红色主题 - 深色模式 */
  html.dark .day[data-level="0"] {
    background-color: #161b22;
  }
  html.dark .day[data-level="1"] {
    background-color: #5c1a1a;
  }
  html.dark .day[data-level="2"] {
    background-color: #8b2525;
  }
  html.dark .day[data-level="3"] {
    background-color: #c62828;
  }
  html.dark .day[data-level="4"] {
    background-color: #ff5252;
  }

  .legend {
    @apply flex items-center gap-2 mt-4 text-xs text-base-content/60;
  }

  .legend-text {
    @apply text-xs;
  }

  .legend-squares {
    @apply flex gap-1;
  }

  .legend-squares .day {
    @apply cursor-default;
  }

  .legend-squares .day:hover {
    @apply ring-0;
    transform: none;
  }

  .footer-link {
    @apply mt-4 text-center;
  }

  .footer-link a {
    @apply text-sm text-primary hover:underline;
  }

  @media (max-width: 768px) {
    .calendar-graph {
      @apply -mx-2;
    }

    .months {
      grid-template-columns: repeat(53, 10px);
      gap: 2px;
    }

    .week {
      gap: 2px;
    }

    .weeks {
      gap: 2px;
    }

    .day {
      width: 10px;
      height: 10px;
    }
  }
</style>
