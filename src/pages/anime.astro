---
type Subject = {
  id: number;
  name: string;
  name_cn?: string;
  date?: string;
  images?: {
    common?: string;
  };
};

type WatchingItem = {
  subject: Subject;
};

const username = "851657"; // 建议放到 import.meta.env.PUBLIC_BGM_USER
const baseUrl = `https://api.bgm.tv/v0/users/${username}/collections`;

async function fetchCollection(type: number): Promise<WatchingItem[]> {
  let page = 1;
  const limit = 30;
  let allData: WatchingItem[] = [];

  try {
    while (true) {
      const res = await fetch(`${baseUrl}?type=${type}&limit=${limit}&offset=${(page - 1) * limit}`, {
        headers: {
          "User-Agent": "AstroBlog/1.0 (https://yourblog.com)",
        },
      });

      if (!res.ok) {
        console.error("API 请求失败", res.status);
        break;
      }

      const data = await res.json();
      if (!data.data || data.data.length === 0) break;

      allData = allData.concat(data.data);

      if (data.data.length < limit) break;
      page++;
    }
  } catch (err) {
    console.error("API 错误", err);
  }

  return allData;
}
---

<html lang="zh">
  <head>
    <meta charset="UTF-8" />
    <title>我的追番</title>
    <style>
      body {
        font-family: "Segoe UI", "PingFang SC", sans-serif;
        margin: 0;
        background: #f5f6fa;
        color: #333;
      }

      h1 {
        text-align: center;
        margin: 2rem 0 1rem;
        font-size: 2rem;
        font-weight: 700;
      }

      #search {
        display: block;
        margin: 0 auto 1.5rem;
        padding: 0.6rem 1rem;
        width: 90%;
        max-width: 350px;
        border-radius: 9999px;
        border: 1px solid #ddd;
        font-size: 1rem;
        outline: none;
        transition: 0.2s;
      }
      #search:focus {
        border-color: #0078d7;
        box-shadow: 0 0 0 3px rgba(0, 120, 215, 0.2);
      }

      .tabs {
        display: flex;
        justify-content: center;
        gap: 0.8rem;
        margin-bottom: 2rem;
      }
      .tabs button {
        padding: 0.5rem 1.2rem;
        border: none;
        border-radius: 9999px;
        background: #e9ecef;
        cursor: pointer;
        font-size: 0.95rem;
        transition: all 0.2s;
      }
      .tabs button:hover {
        background: #d0d5da;
      }
      .tabs button.active {
        background: #0078d7;
        color: white;
        font-weight: 600;
        box-shadow: 0 2px 6px rgba(0, 120, 215, 0.4);
      }

      .grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
        gap: 1.5rem;
        padding: 0 1rem 2rem;
        max-width: 1200px;
        margin: auto;
      }

      .card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        text-align: center;
        transition: transform 0.2s, box-shadow 0.2s;
      }
      .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
      }
      .card img {
        width: 100%;
        aspect-ratio: 3/4;
        object-fit: cover;
      }
      .card h3 {
        font-size: 1rem;
        margin: 0.8rem 0 0.3rem;
        padding: 0 0.5rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
      .card p {
        font-size: 0.85rem;
        color: #777;
        margin-bottom: 0.8rem;
      }
    </style>
  </head>

  <body>
    <h1>📺 我的追番</h1>

    <input type="text" id="search" placeholder="搜索番剧..." />

    <div class="tabs">
      <button id="tab-watching" class="active">在看</button>
      <button id="tab-wish">想看</button>
      <button id="tab-watched">看过&玩过</button>
    </div>

    <div id="tab-content">
      <div id="content-watching" class="grid"><p>加载中…</p></div>
      <div id="content-wish" class="grid" style="display:none;"><p>加载中…</p></div>
      <div id="content-watched" class="grid" style="display:none;"><p>加载中…</p></div>
    </div>

    <script type="module">
      const tabButtons = [
        document.getElementById("tab-watching"),
        document.getElementById("tab-wish"),
        document.getElementById("tab-watched"),
      ];
      const tabContents = [
        document.getElementById("content-watching"),
        document.getElementById("content-wish"),
        document.getElementById("content-watched"),
      ];
      const searchInput = document.getElementById("search");

      tabButtons.forEach((btn, idx) => {
        if (btn) {
          btn.addEventListener("click", () => {
            tabButtons.forEach((b) => b && b.classList.remove("active"));
            btn.classList.add("active");
            tabContents.forEach((c, i) => c && (c.style.display = i === idx ? "" : "none"));
            filterCards();
          });
        }
      });

      if (searchInput) {
        searchInput.addEventListener("input", filterCards);
      }

      function filterCards() {
        const term = searchInput ? searchInput.value.toLowerCase() : "";
        const activeContent = tabContents.find((c) => c && c.style.display !== "none");
        if (!activeContent) return;
        const cards = activeContent.querySelectorAll(".card");
        cards.forEach((card) => {
          const name = card.dataset.name || "";
          card.style.display = name.includes(term) ? "" : "none";
        });
      }

      async function fetchCollectionJS(type) {
        const username = "851657";
        const baseUrl = `https://api.bgm.tv/v0/users/${username}/collections`;
        let page = 1;
        const limit = 30;
        let allData = [];

        try {
          while (true) {
            const res = await fetch(`${baseUrl}?type=${type}&limit=${limit}&offset=${(page-1)*limit}`, {
              headers: {
                "User-Agent": "AstroBlog/1.0 (https://yourblog.com)",
              },
            });
            if (!res.ok) break;
            const data = await res.json();
            if (!data.data || data.data.length === 0) break;
            allData = allData.concat(data.data);
            if (data.data.length < limit) break;
            page++;
          }
        } catch (err) {
          console.error(err);
        }
        return allData;
      }

      function renderCards(container, items, emptyText) {
        if (!container) return;
        if (!items || items.length === 0) {
          container.innerHTML = `<p>${emptyText}</p>`;
          return;
        }

        container.innerHTML = items.map(item => `
          <div class="card" data-name="${(item.subject.name_cn || item.subject.name).toLowerCase()}">
            ${item.subject.images?.common ? `<a href="https://bgm.tv/subject/${item.subject.id}" target="_blank"><img src="${item.subject.images.common}" alt="${item.subject.name_cn || item.subject.name}" /></a>` : ""}
            <h3>${item.subject.name_cn || item.subject.name}</h3>
            ${item.subject.date ? `<p>${item.subject.date}</p>` : ""}
          </div>
        `).join("");
      }

      async function init() {
        const [watching, wish, watched] = await Promise.all([
          fetchCollectionJS(3),
          fetchCollectionJS(1),
          fetchCollectionJS(2)
        ]);

        renderCards(tabContents[0], watching, "目前没有在看的番剧");
        renderCards(tabContents[1], wish, "目前没有想看的番剧");
        renderCards(tabContents[2], watched, "目前没有看过的番剧");

        filterCards();
      }

      init();
    </script>
  </body>
</html>
