---
import BaseLayout from "@/layouts/BaseLayout.astro";
import MainCard from "@/components/MainCard.astro";
---

<BaseLayout title="Anime">
  <MainCard title="Anime" description="追番记录" textOverlay="Anime" infoIcon="lucide:tv">
    <div class="space-y-6 mb-8 max-w-7xl mx-auto px-4">
      <div class="flex flex-col md:flex-row items-center justify-between gap-4">
        <input
          type="text"
          id="search"
          placeholder="搜索动画或游戏..."
          class="px-4 py-2 w-full md:w-80 rounded-full border-2 border-neutral-800 focus:border-neutral-800 focus:ring-2 focus:ring-neutral-800/20 outline-none transition"
        />
        <div class="flex gap-2" id="tab-group">
          <button
            data-tab="watching"
            class="tab-btn px-4 py-2 rounded-full border-2 border-neutral-800 bg-neutral-800 text-white font-semibold shadow transition-all"
            >在看</button
          >
          <button
            data-tab="wish"
            class="tab-btn px-4 py-2 rounded-full border-2 border-neutral-800 bg-transparent text-neutral-900 font-semibold transition-all hover:bg-neutral-100"
            >想看</button
          >
          <button
            data-tab="watched"
            class="tab-btn px-4 py-2 rounded-full border-2 border-neutral-800 bg-transparent text-neutral-900 font-semibold transition-all hover:bg-neutral-100"
            >看过</button
          >
        </div>
      </div>
      <div id="content-area" class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="col-span-full text-center py-12 text-sm text-gray-500">加载中...</div>
      </div>
    </div>

    <script type="module" is:inline>
      // ============ 配置 ============
      let _envApi;
      try {
        _envApi = (typeof import.meta === "object" && import.meta?.env?.PUBLIC_BANGUMI_API) || undefined;
      } catch {
        /* ignore */
      }
      const API = (window.__BANGUMI_API__ || _envApi || "/api/bangumi").replace(/\/$/, "");
      const STATIC_FALLBACK = "/data/bangumi.json";
      const CACHE_KEY = "bangumi_cache_v3";
      const CLIENT_TTL = 30 * 60 * 1000;
      const AUTO_REFRESH_MS = 10 * 60 * 1000;

      let tab = "watching";
      let data = { watching: [], wish: [], watched: [] };
      let expanded = null;
      let isFetching = false;
      let fetchAbortController = null;

      const search = document.getElementById("search");
      const area = document.getElementById("content-area");

      // ============ 缓存管理 ============
      function readCache() {
        try {
          const raw = localStorage.getItem(CACHE_KEY);
          if (!raw) return null;
          const parsed = JSON.parse(raw);
          if (parsed.__cachedAt && Date.now() - parsed.__cachedAt < CLIENT_TTL) {
            return { watching: parsed.watching || [], wish: parsed.wish || [], watched: parsed.watched || [] };
          }
        } catch (e) {
          console.debug("Cache read failed", e);
        }
        return null;
      }

      function saveCache(obj) {
        try {
          localStorage.setItem(CACHE_KEY, JSON.stringify({ ...obj, __cachedAt: Date.now() }));
        } catch (e) {
          console.debug("Cache save failed", e);
        }
      }

      // ============ 数据获取 ============
      async function fetchData(force = false) {
        if (isFetching) {
          console.debug("[bangumi] Request already in progress");
          return null;
        }

        if (!force) {
          const cached = readCache();
          if (cached) {
            data = cached;
            render();
            return { cachedAt: Date.now(), servedFrom: "cache" };
          }
        }

        isFetching = true;
        fetchAbortController = new AbortController();

        try {
          const res = await fetch(`${API}?t=${Date.now()}`, {
            cache: "no-store",
            signal: fetchAbortController.signal,
          });

          if (!res.ok) throw new Error(`API status ${res.status}`);

          const json = await res.json();
          data = {
            watching: json.watching || [],
            wish: json.wish || [],
            watched: json.watched || [],
          };
          saveCache(data);
          render();

          return {
            cachedAt: json.cachedAt || Date.now(),
            servedFrom: json.servedFrom || "api",
          };
        } catch (primaryErr) {
          if (primaryErr.name === "AbortError") {
            console.debug("[bangumi] Request cancelled");
            return null;
          }

          console.warn("[bangumi] API failed, trying static fallback:", primaryErr.message);

          try {
            const resStatic = await fetch(`${STATIC_FALLBACK}?t=${Date.now()}`, {
              cache: "no-store",
              signal: fetchAbortController.signal,
            });

            if (!resStatic.ok) throw new Error(`Fallback status ${resStatic.status}`);

            const json = await resStatic.json();
            data = {
              watching: json.watching || [],
              wish: json.wish || [],
              watched: json.watched || [],
            };
            saveCache(data);
            render();

            return { cachedAt: json.cachedAt, servedFrom: "static" };
          } catch (fallbackErr) {
            if (fallbackErr.name === "AbortError") return null;

            console.error("[bangumi] All sources failed:", fallbackErr.message);

            if (!data.watching.length && !data.wish.length && !data.watched.length) {
              area.innerHTML =
                '<div class="col-span-full text-center py-8 text-sm text-red-500">无法加载数据，请检查网络连接后刷新页面</div>';
            }
            return null;
          }
        } finally {
          isFetching = false;
          fetchAbortController = null;
        }
      }

      // 直接抓取 Bangumi 上游 API
      async function directUpstreamFetch() {
        console.info("[bangumi] 尝试直接抓取上游 API ...");
        const USER_ID = "851657";
        const LIMIT = 30;
        const BASE = `https://api.bgm.tv/v0/users/${USER_ID}/collections`;

        async function fetchCollection(type) {
          let page = 1;
          const all = [];
          while (true) {
            const url = `${BASE}?type=${type}&limit=${LIMIT}&offset=${(page - 1) * LIMIT}`;
            const res = await fetch(url, {
              headers: { "User-Agent": "ShepherdBlog/ClientFetch (+github.com/Duskydream)" },
              cache: "no-store",
            });
            if (!res.ok) break;
            const json = await res.json();
            if (!json.data || json.data.length === 0) break;
            all.push(...json.data);
            if (json.data.length < LIMIT) break;
            page++;
            if (page > 10) break;
          }
          return all;
        }

        try {
          const [watching, wish, watched] = await Promise.all([
            fetchCollection(3), // 在看
            fetchCollection(1), // 想看
            fetchCollection(2), // 看过
          ]);
          data = { watching, wish, watched };
          saveCache(data);
          render();
          console.info(
            "[bangumi] 上游抓取完成: watching=%d wish=%d watched=%d",
            watching.length,
            wish.length,
            watched.length,
          );
          return true;
        } catch (e) {
          console.error("[bangumi] 上游抓取失败", e);
          return false;
        }
      }

      // ============ 渲染 ============
      window.toggle = (id) => {
        expanded = expanded === id ? null : id;
        render();
      };

      function card(item) {
        const t = item.subject?.name_cn || item.subject?.name || "?";
        const img = item.subject?.images?.common || "";
        const id = item.subject?.id || 0;
        const cmt = item.comment?.trim() || "";
        const date = item.subject?.date || "";
        const open = expanded === id;

        return `
<div class="bg-white dark:bg-gray-800 rounded-xl shadow-md hover:shadow-xl transition-shadow">
  <div class="flex gap-4 p-4 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700/50" onclick="toggle(${id})">
    <div class="w-24 h-32 rounded overflow-hidden bg-gray-200 flex-shrink-0">
      ${img ? `<img src="${img}" alt="${t}" class="w-full h-full object-cover"/>` : '<div class="flex items-center justify-center h-full text-3xl">📺</div>'}
    </div>
    <div class="flex-1 min-w-0">
      <h3 class="font-semibold text-lg mb-1 line-clamp-2">${t}</h3>
      ${date ? `<p class="text-sm text-gray-500 mb-2">📅 ${date}</p>` : ""}
      ${cmt ? `<p class="text-sm text-gray-600 line-clamp-2">💬 ${cmt.slice(0, 100)}...</p>` : ""}
    </div>
    <svg class="w-6 h-6 text-gray-400 transition-transform ${open ? "rotate-180" : ""}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
    </svg>
  </div>
  <div style="max-height:${open ? "800px" : "0"}" class="overflow-hidden transition-all duration-300">
    <div class="px-4 pb-4 pt-2 border-t border-gray-200 dark:border-gray-700">
      ${cmt ? `<div class="my-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg p-3"><h4 class="font-semibold text-sm text-gray-700 dark:text-gray-200 mb-2">💭 我的评论</h4><p class="text-sm text-gray-600 dark:text-gray-300 whitespace-pre-wrap leading-relaxed">${cmt}</p></div>` : ""}
      <a href="https://bgm.tv/subject/${id}" target="_blank" rel="noopener noreferrer"
         style="display: inline-flex; align-items: center; gap: 0.5rem; padding: 0.5rem 1rem; background-color: #262626; color: white; border-radius: 0.5rem; font-size: 0.875rem; font-weight: 500; text-decoration: none; transition: all 0.2s;"
         onmouseover="this.style.backgroundColor='#171717'"
         onmouseout="this.style.backgroundColor='#262626'">
        <svg style="width: 1rem; height: 1rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
        </svg>
        <span>前往 Bangumi</span>
      </a>
    </div>
  </div>
</div>`;
      }

      function render() {
        const list = data[tab] || [];
        const term = search.value.toLowerCase().trim();
        const filtered = term
          ? list.filter((x) => (x.subject?.name_cn || x.subject?.name || "").toLowerCase().includes(term))
          : list;

        if (!filtered.length) {
          area.innerHTML = '<div class="col-span-full text-center py-12 text-gray-500">📭 暂无内容</div>';
          return;
        }

        area.innerHTML = filtered.map(card).join("");
      }

      function setTab(t) {
        tab = t;
        expanded = null;
        document.querySelectorAll(".tab-btn").forEach((b) => {
          const active = b.dataset.tab === t;
          b.classList.toggle("bg-neutral-800", active);
          b.classList.toggle("text-white", active);
          b.classList.toggle("shadow", active);
          b.classList.toggle("bg-transparent", !active);
          b.classList.toggle("text-neutral-900", !active);
        });
        render();
      }

      document.querySelectorAll(".tab-btn").forEach((b) => b.addEventListener("click", () => setTab(b.dataset.tab)));

      let timer;
      search.addEventListener("input", () => {
        clearTimeout(timer);
        timer = setTimeout(() => {
          expanded = null;
          render();
        }, 300);
      });

      // ============ 初始化 ============
      (async () => {
        area.innerHTML = '<div class="text-center py-12 text-sm text-gray-500">加载中...</div>';

        // 首次加载强制刷新
        const meta = await fetchData(true);

        // 如果获取的是静态数据，尝试直接抓取上游
        if (!meta || (meta.servedFrom && meta.servedFrom.startsWith("static"))) {
          await directUpstreamFetch();
        }

        // 自动刷新
        setInterval(async () => {
          const m2 = await fetchData(true);
          if (m2 && m2.servedFrom && m2.servedFrom.startsWith("static")) {
            // 可选：取消注释以启用自动上游抓取
            // await directUpstreamFetch();
          }
        }, AUTO_REFRESH_MS);

        // 页面可见性检测 - 隐藏时停止刷新
        document.addEventListener("visibilitychange", () => {
          if (!document.hidden) {
            fetchData(true);
          }
        });

        setTab("watching");
      })();
    </script>
  </MainCard>
</BaseLayout>
