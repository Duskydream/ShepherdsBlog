import rss from '@astrojs/rss';
import { a as SITE_TAB, S as SITE_LANGUAGE, b as SITE_DESCRIPTION, c as SITE_TITLE } from '../chunks/config_DCCOjQe-.mjs';
import { getCollection } from '../chunks/_astro_content_gv3P6M0L.mjs';
import { marked } from 'marked';
export { renderers } from '../renderers.mjs';

async function GET(context) {
  const allPosts = await getCollection("blog");
  const posts = allPosts.filter((post) => !post.data.draft) ;
  const sortedPosts = posts.sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());
  function replacePath(content, siteUrl) {
    return content.replace(/(src|img|r|l)="([^"]+)"/g, (match, attr, src) => {
      if (!src.startsWith("http") && !src.startsWith("//") && !src.startsWith("data:")) {
        return `${attr}="${new URL(src, siteUrl).toString()}"`;
      }
      return match;
    });
  }
  const items = await Promise.all(sortedPosts.map(async (blog) => {
    const { data: { title, description, pubDate }, body, slug } = blog;
    const content = body ? replacePath(await marked(body), context.site) : "No content available.";
    const postURL = new URL(`/blog/${slug}/`, context.site);
    return {
      title,
      description,
      link: postURL.toString(),
      guid: postURL.toString(),
      content: `<blockquote>This rendering was automatically generated by Frosti Feed and may have formatting issues. For the best experience, please visit: <a href="${postURL}">${postURL}</a></blockquote> ${content}`,
      customData: `
        <dc:creator><![CDATA[${SITE_TAB}]]></dc:creator>
        <pubDate>${new Date(pubDate).toUTCString()}</pubDate>
      `
    };
  }));
  return rss({
    title: SITE_TITLE,
    description: SITE_DESCRIPTION,
    site: context.site,
    items,
    customData: `
      <language>${SITE_LANGUAGE}</language>
    `,
    xmlns: {
      dc: "http://purl.org/dc/elements/1.1/",
      content: "http://purl.org/rss/1.0/modules/content/",
      atom: "http://www.w3.org/2005/Atom",
      version: "2.0"
    }
  });
}

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  GET
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
